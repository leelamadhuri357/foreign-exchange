#!/usr/bin/env python
# coding: utf-8

# In[3]:


import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import GridSearchCV
from keras.preprocessing.sequence import TimeseriesGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Flatten
from sklearn.metrics import accuracy_score, confusion_matrix,classification_report, r2_score,mean_absolute_error,mean_squared_error
import datetime


# In[4]:


data = pd.read_excel('C:/Time series Project Files/INUS.xlsx',parse_dates=True)
df = data.iloc[10:data.shape[0]]
df = df.rename(columns={'FRED Graph Observations':'Date','Unnamed: 1':'INR'})
df['Date'] = pd.to_datetime(df['Date'])
df['INR'] = pd.to_numeric(df['INR'])
df = df.dropna()
df = df[df.INR != 0]
df = df.set_index('Date')
df.head()


# In[5]:


scaler = MinMaxScaler()


# In[6]:


df2 = df


# In[7]:


train = df2.iloc[-1125:-30]
test = df2.iloc[-30:]


# In[8]:


train = scaler.fit_transform(train)
test = scaler.fit_transform(test)


# In[9]:


def get_data(data, look_back):
    x, y = [], []
    for i in range (len(data)-look_back):
        x.append(data[i:i+look_back,0])
        y.append(data[i+look_back,0])
    return np.array(x), np.array(y)


# In[10]:


look_back = 1

x_train, y_train = get_data(train,look_back)
x_test,y_test = get_data(test,look_back)


# In[11]:


x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)
x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)


# In[12]:


n_features = x_train.shape[1]

model =Sequential()
model.add(LSTM(100,activation='relu',input_shape=(1,1)))
model.add(Dense(n_features))

model.compile(optimizer='adam', loss = 'mse')


# In[13]:


model.summary()


# In[15]:


model.fit(x_train,y_train, epochs = 150, batch_size=27)


# In[16]:


loss_per_epoch = model.history.history['loss']
plt.plot(range(len(loss_per_epoch)),loss_per_epoch)


# In[17]:


y_pred = model.predict(x_test)
tempo = y_pred
y_pred = scaler.inverse_transform(y_pred)

y_test = np.array(y_test).reshape(-1,1)
y_test = scaler.inverse_transform(y_test)


# In[18]:


data = df2.iloc[-29:]
data['Predicted_INR'] = y_pred


# In[19]:


data.plot(figsize=(25,6))


# In[20]:


from sklearn.metrics import mean_squared_error
from math import sqrt


# In[21]:


rmse = sqrt(mean_squared_error(data['INR'],data['Predicted_INR']))
print(rmse)


# In[22]:


last_date = data.index[-1].date()
n_days = 30

future_dates = []
for day in range(n_days):
    date = (last_date + datetime.timedelta(days = day)).isoformat()
    future_dates.append(date)


# In[23]:


dummy_array = np.empty((30,2))
dummy_array[:] = np.nan

future_dates = pd.to_datetime(future_dates)
index = future_dates
columns = ['INR','Predicted_INR']
future_data = pd.DataFrame(dummy_array,columns=columns,index=index)

future_data.iloc[0,0] = float(x_test[-1])
future_data.iloc[0,1] = float(tempo[-1])

for i in range(0,n_days-1):
    future_data['INR'][i+1] = future_data['Predicted_INR'][i]
    y = np.array(float(future_data['INR'][i+1]))
    y = y.reshape(1,1,1)
    pred = model.predict(y)
    future_data['Predicted_INR'][i+1] = pred

t = future_data.INR
z = future_data.Predicted_INR

t = np.array(t)
t = t.reshape(t.shape[0],1)
z = np.array(z)
z = z.reshape(z.shape[0],1)

t = scaler.inverse_transform(t)
z = scaler.inverse_transform(z)

actual_data = [74.14,74.1838,74.2044,74.29,74.29,74.33,74.56,74.51,74.4803,74.5011,74.3231,74.58,74.81,74.76,74.53,74.488,74.4776,74.56,74.51,74.54,74.55,74.61,74.631,74.6062,74.85,74.6,74.49,74.46,74.44,74.4408]

future_data['INR'] = t
future_data['Predicted_INR'] = z
future_data['Actual_INR'] = actual_data


# In[24]:


rmse = sqrt(mean_squared_error(future_data['Actual_INR'],future_data['Predicted_INR']))
print('RMSE of the predicted data:',rmse)
print(future_data)

data['INR'].plot(legend = True, figsize=(30,16))
data['Predicted_INR'].plot(legend = True, figsize=(30,16))
future_data['Predicted_INR'].plot(legend = True,figsize=(30,16))
future_data['Actual_INR'].plot(legend = True,figsize=(30,16))


# In[ ]:


plt.figure(figsize=(30,12))
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.plot(d.index,d.INR, label = "Actual_INR_value",color='Black',linewidth=6)
plt.plot(future_data.index,future_data.Predicted_INR, label = "Predicted_INR_value",color='Red',linewidth=6)
plt.xlabel('Date',fontsize=20)
plt.ylabel('INR',fontsize=20)
plt.title('{} DAYS PREDICTION'.format(n_days),fontsize=40)
plt.legend(fontsize=20)
plt.show()

